package bot

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/maxwww/rd/units"
	"sort"
	"strings"
	"time"
)

const (
	commandStart       = "start"
	commandSubscribe   = "subscribe"
	commandUnsubscribe = "unsubscribe"
	commandTimetable   = "timetable"
	commandToday       = "today"
	commandTomorrow    = "tomorrow"
	commandSchedule    = "schedule"
	commandHelp        = "help"
)

func (bot *Bot) handleCommand(command string, chatId int64, user *units.User) {
	switch command {
	case commandStart, commandHelp:
		bot.handleStartCommand(chatId)
	case commandSchedule:
		bot.handleScheduleCommand(chatId)
	case commandToday:
		bot.handleTodayCommand(chatId)
	case commandTomorrow:
		bot.handleTomorrowCommand(chatId)
	case commandTimetable:
		bot.handleTimetableCommand(chatId)
	case commandSubscribe:
		bot.handleSubscribeCommand(chatId, user)
	case commandUnsubscribe:
		bot.handleUnsubscribeCommand(chatId, user)
	default:
		bot.handleUnknownCommand(chatId)
	}
	//msg := tgbotapi.NewMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
	//bot.BotAPI.Send(msg)
}

func (bot *Bot) handleStartCommand(chatId int64) {
	msg := tgbotapi.NewMessage(chatId, `–Ø, ü§ñ. –Ø –º–æ–∂—É –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ —à–∫—ñ–ª—å–Ω–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º.
–Ø –∑–Ω–∞—é —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ —Ç–∞ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —É 4 –∫–ª–∞—Å—ñ –¥–ª—è 21-—ó —à–∫–æ–ª–∏.
–¢–∞–∫–æ–∂ —è –º–æ–∂—É —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ–±–µ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —É—Ä–æ–∫—ñ–≤.

–û—Å—å —Å–ø–∏—Å–æ–∫ –º–æ—ó—Ö –∫–æ–º–∞–Ω–¥:
/today - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
/tomorrow - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/timetable - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –Ω–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å
/schedule - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤
/subscribe - —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
/unsubscribe - –≤–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

–ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è —á–∏ —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è? –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É - @msfilo`)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleScheduleCommand(chatId int64) {
	responseText := "<b>–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:</b>\n"
	for _, bell := range Bells {
		responseText += fmt.Sprintf("%d. %s\t-\t%s\n", bell.Position, bell.Start, bell.End)
	}
	msg := tgbotapi.NewMessage(chatId, responseText)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleTodayCommand(chatId int64) {
	weekday := int(time.Now().Weekday())
	weekdayName := DayNames[weekday]
	todayTimetable, ok := Timetable[weekday]
	if !ok {
		msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("–¢–∏ —â–æ? –°—å–æ–≥–æ–¥–Ω—ñ –∂ %s!\n–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤.", weekdayName))
		msg.ParseMode = "html"
		bot.BotAPI.Send(msg)
		return
	}
	responseText := fmt.Sprintf("<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ (%s):</b>\n", weekdayName)

	responseText += getOneDayTimetable(todayTimetable.Subjects)
	msg := tgbotapi.NewMessage(chatId, responseText)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleTomorrowCommand(chatId int64) {
	weekday := int(time.Now().Weekday())
	tomorrowWeekday := weekday + 1
	if tomorrowWeekday > 6 {
		tomorrowWeekday = 0
	}
	tomorrowWeekdayName := DayNames[tomorrowWeekday]
	tomorrowTimetable, ok := Timetable[tomorrowWeekday]
	if !ok {
		mondayTimetable := Timetable[1]
		responseText := fmt.Sprintf("–ó–∞–≤—Ç—Ä–∞ - %s! –í–∏—Ö—ñ–¥–Ω–∏–π!\n–ê–ª–µ –æ—Å—å —Ç–æ–±—ñ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫:\n", tomorrowWeekdayName)

		responseText += getOneDayTimetable(mondayTimetable.Subjects)
		msg := tgbotapi.NewMessage(chatId, responseText)
		msg.ParseMode = "html"
		bot.BotAPI.Send(msg)
		return
	}

	responseText := fmt.Sprintf("<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ (%s):</b>\n", tomorrowWeekdayName)

	responseText += getOneDayTimetable(tomorrowTimetable.Subjects)
	msg := tgbotapi.NewMessage(chatId, responseText)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleTimetableCommand(chatId int64) {
	responseText := "<b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤:</b>\n\n"

	keys := make([]int, 0, len(Timetable))
	for k := range Timetable {
		keys = append(keys, k)
	}
	sort.Ints(keys)

	for _, k := range keys {
		responseText += fmt.Sprintf("%s:\n", Timetable[k].Name)
		responseText += getOneDayTimetable(Timetable[k].Subjects)
		responseText += "\n"
	}

	msg := tgbotapi.NewMessage(chatId, responseText)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleSubscribeCommand(chatId int64, user *units.User) {
	notify := true
	err := bot.userService.UpdateUser(context.Background(), user, units.UserPatch{
		Notify: &notify,
	})
	if err != nil {
		bot.sendGeneralError(chatId)
		return
	}

	msg := tgbotapi.NewMessage(chatId, `–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.
–¢–µ–ø–µ—Ä –∑–∞ 5 —Ö–≤ –¥–æ –ø–æ—á–∞—Ç–∫—É —É—Ä–æ–∫—É —Ç–∏ –±—É–¥–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
–ê–±–∏ –≤–∏–º–∫—É–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è /unsubscribe –∫–æ–º–∞–Ω–¥–æ—é.`)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleUnsubscribeCommand(chatId int64, user *units.User) {
	notify := false
	err := bot.userService.UpdateUser(context.Background(), user, units.UserPatch{
		Notify: &notify,
	})
	if err != nil {
		bot.sendGeneralError(chatId)
		return
	}

	msg := tgbotapi.NewMessage(chatId, `–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω—É—Ç–æ.
–ê–±–∏ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è /subscribe –∫–æ–º–∞–Ω–¥–æ—é.`)
	msg.ParseMode = "html"
	bot.BotAPI.Send(msg)
}

func (bot *Bot) handleUnknownCommand(chatId int64) {
	msg := tgbotapi.NewMessage(chatId, "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –∞–±–æ –¥–æ–≤—ñ–¥–∫–æ—é - /help")
	bot.BotAPI.Send(msg)
}

func getOneDayTimetable(subjects [][]Subject) string {
	responseText := ""

	for i, subjects := range subjects {
		var names []string
		for _, subject := range subjects {
			names = append(names, subject.ShortName)
		}

		responseText += fmt.Sprintf("%d. %s\n", i+1, strings.Join(names, "/"))
	}

	return responseText
}
